scalar DateTime
scalar BigDecimal

input checkTwitterInput {
  url: String!
  address: String!
  campaignId: Int!
}

input CreateCampaignInput {
  title: String!
  description: String!
  suggestion: String!
  mandatoryContent: [String!]!
  forbiddenContent: [String!]!
}

input UpdateCampaignInput {
  id: Int!
  title: String!
  description: String!
  suggestion: String!
  mandatoryContent: [String!]!
  forbiddenContent: [String!]!
}

enum SorterEnum {
  desc
  asc
}

input ContainsFilterInput {
  contains: String!
}

input CreatorFilterInput {
  id: Int!
}

input CampaignWhereInput {
  id: Int
  title: ContainsFilterInput
  published: Boolean
  creator: CreatorFilterInput
}

input CampaignOrderByInput {
  valuePerShare: SorterEnum
}

input CampaignFilterInput {
  id: Int
  where: CampaignWhereInput
  orderBy: CampaignOrderByInput
  skip: Int
  take: Int
}

type Blockchain {
  id: ID!
  name: String!
  chainId: Int!
}

type Token {
  id: ID!
  address: String!
  name: String!
  symbol: String!
  decimals: BigDecimal!
  totalSupply: BigDecimal!
  blockchain: Blockchain!
  native: Boolean!
}

type Deposit {
  id: ID!
  token: Token!
  funded: Boolean!
  address: String!
  message: String!
  post: Post!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Post {
  id: ID!
  url: String!
  content: String!
  deposit: Deposit
  tweetId: String!
  author: User!
  campaign: Campaign!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Campaign {
  id: ID!
  campaignHash: String!
  title: String!
  description: String
  suggestion: String!
  mandatoryContent: [String!]!
  forbiddenContent: [String!]!
  published: Boolean!
  creator: Creator!
  token: Token
  valuePerShare: BigDecimal
  totalValue: BigDecimal

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Creator {
  id: ID!
  walletAddress: String!
  nonce: String!
}

input Signature {
  r: String!
  s: String!
  v: Int!
}

type User {
  id: ID!
  twitterUsername: String
  posts: [Post!]!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  healthCheck: String!
  campaigns(input: CampaignFilterInput): [Campaign!]!
  creator(address: String!): Creator!
}

type Mutation {
  checkTwitter(input: checkTwitterInput!): String

  register(address: String!): Creator!
  login(signedMessage: String!, signature: Signature!): String!

  createCampaign(input: CreateCampaignInput!): Campaign!
  updateCampaign(input: UpdateCampaignInput!): Campaign!
}
